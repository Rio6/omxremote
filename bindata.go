// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x6d\x8f\xdb\xb8\xf1\x7f\x9f\x4f\x31\xc7\xe4\xb0\x36\x6e\x25\x79\xf7\x76\xff\xf8\xc7\x6b\xfb\xd0\xde\x05\x28\xfa\xa2\x39\x20\xe9\x8b\xa2\x28\x16\xb4\x34\x5a\x33\x4b\x91\x2a\x49\xd9\xde\xcb\xed\x77\x2f\x48\xea\x59\xb2\xd7\x6e\x9a\xeb\x15\x01\x62\x89\x43\xce\xfc\x66\xe6\xc7\xe1\x83\x76\xf1\xcd\x4f\xef\x7f\xfc\xf8\xb7\x9f\xdf\xc1\xc6\x64\x7c\xf5\x6a\xe1\x7f\x00\x16\x1b\xa4\x89\x7d\x00\x58\x64\x68\x28\x08\x9a\xe1\x92\x6c\x19\xee\x72\xa9\x0c\x81\x58\x0a\x83\xc2\x2c\xc9\x8e\x25\x66\xb3\x4c\x70\xcb\x62\x0c\xdc\xcb\x25\x30\xc1\x0c\xa3\x3c\xd0\x31\xe5\xb8\xbc\x0a\x67\x97\x90\xd1\x3d\xcb\x8a\xac\xdd\x54\x68\x54\xee\x9d\xae\x39\x2e\x85\x24\x10\x0d\x2d\xd2\x3c\xe7\x18\x64\x72\xcd\x38\x06\x3b\x5c\x07\x34\xcf\x83\x98\xe6\x76\x4c\x0b\xc5\x13\xea\x66\x38\x67\xe2\x11\x36\x0a\xd3\x25\xd9\x18\x93\xcf\xa3\x28\xa3\xfb\x38\x11\xe1\x5a\x4a\xa3\x8d\xa2\xb9\x7d\x89\x65\x16\xa5\x52\x98\x80\xee\x50\xcb\x0c\xa3\x9b\xf0\x3a\x9c\x45\xb1\xd6\x9d\xe6\x30\x63\x22\x8c\xb5\x26\xa0\x90\x2f\x89\x36\x4f\x1c\xf5\x06\xd1\x34\xf6\x74\xac\x58\x6e\xc0\x3c\xe5\xb8\x24\x06\xf7\x26\xfa\x44\xb7\xd4\xb7\x12\xd0\x2a\xf6\x38\xf4\x3c\x8a\x62\x99\x60\xf8\xe9\x9f\x05\xaa\x27\x07\xc0\x3f\x06\xd7\xe1\x55\x78\xe5\x2c\x7d\xd2\x64\xb5\x88\xfc\xd8\x52\xbd\x61\x86\xe3\x4a\x66\x7b\x85\x99\x34\xb8\x88\x7c\x83\xcd\x52\x54\xa5\x69\xe1\x70\xf9\x01\x36\x87\xf0\xd9\x3d\x02\x6c\x90\x3d\x6c\xcc\x1c\xae\x66\xb3\x6f\xef\x5c\xdb\xf3\x2b\xf7\xb3\x96\xc9\x53\xdd\x2b\xa7\x49\xc2\xc4\xc3\x1c\x66\xf9\xfe\xae\x6c\xcb\xa8\x7a\x60\xa2\xd3\x34\x54\x06\xe0\x62\x95\xd2\x8c\xf1\xa7\x39\xfc\x09\xf9\x16\x0d\x8b\x69\x25\x5d\xd3\xf8\xf1\x41\xc9\x42\x24\x73\x78\x9d\xa6\x69\xd5\x1e\x4b\x2e\xd5\x1c\x5e\xcf\x66\xb3\x0e\x2a\x16\xa6\x34\xc8\x39\x1d\x40\x0b\x38\xa6\x66\x0e\xff\x5f\x81\x29\xfb\x87\xeb\xc2\x18\x29\xea\xde\x71\xa1\xb4\x55\x9c\x4b\x26\x0c\xaa\xbe\xb9\x9b\x9b\x9b\xb1\xe1\x21\x8d\x0d\xdb\x62\xa3\xa5\x41\x07\xdf\xb0\xcc\x32\x9e\x0a\xd3\x1b\xa9\xe4\x4e\x37\x43\x12\xa6\x2d\xec\x39\x08\x29\xb0\x32\xfb\x4b\xc0\x44\x82\xfb\x39\x5c\x8d\x8e\x2d\xf8\x79\x09\x18\x0e\xe7\xec\xdc\x14\x72\xa6\x4d\xe0\xc8\x12\x58\xbe\x76\xf1\x36\xc2\x7e\xbb\xc0\xa0\x4e\x7e\x78\x8b\x59\x9d\x5f\xa9\x12\x54\xc1\x5a\x1a\x23\xb3\x39\x5c\xe5\x7b\xd0\x92\xb3\x04\x5e\x23\xd6\xc3\x6b\x68\x57\xd7\xf9\xbe\x49\x61\xc9\x1d\xcd\x7e\x41\xab\xf5\xaa\xd2\x3a\xea\x26\x1b\x4b\x4e\xd7\xcf\x40\x79\x80\x37\x8d\x81\x3a\x2b\x4c\x38\x1f\xd6\x5c\xc6\x8f\x95\xd0\x15\xab\x39\x5c\xb7\xa2\x63\x27\x6f\x40\x39\x7b\x10\x73\x88\xb1\x61\xd0\x28\x24\x5a\x43\x72\xc3\x12\x8c\xa5\xa2\x86\x49\xd1\x0d\xde\x08\xde\xdd\x86\x19\x0c\x74\x4e\x63\x17\xe8\x9d\xa2\x79\x25\x92\x5b\x54\x29\x97\xbb\x39\x6c\x58\x92\xa0\xe8\x20\x6b\x84\xc8\x39\xcb\x35\xd3\x03\x47\x5b\x1e\x56\xa0\x0b\xc5\x03\x26\xf2\xc2\x34\x5c\x91\x9a\x79\xa0\x0a\x39\xb5\xd4\xef\xc5\xa4\x3d\xc1\xab\xbc\x5f\xf7\xf3\xd3\xe8\xed\x6a\x3f\x45\x47\x1b\x03\x5d\x6b\xc9\x0b\xd3\xb0\xcd\xcd\xf4\x59\x8f\x62\x8a\x26\xac\xd0\x75\xfb\x10\x44\xbf\x14\x94\x93\x0f\xae\x66\xfd\x84\x37\x20\xce\xc2\x55\xd2\x6b\x76\x2a\x59\xec\xe2\xa4\x24\xd7\xc7\x6b\xc4\xbf\x95\x8b\x76\x5b\x5d\x64\xae\x0f\x98\x67\x23\x79\xef\xfb\x66\x64\x3e\x87\xdb\xd9\xb7\x77\x65\xf4\x6f\x1b\xfd\x76\xd5\x7d\x64\x26\x30\x8a\x0a\x9d\x4a\x95\xcd\xc1\x3d\x72\x6a\x70\x12\xdc\xce\xbe\xbd\x04\xfb\xff\xf4\x80\xf5\x50\xe1\x8e\x89\x64\x04\x43\xca\xf6\x98\x74\x00\xcc\x06\x79\x69\x60\x0c\xa2\x71\xd0\x52\x9f\x08\x2f\x46\xf8\xf6\x78\x80\x53\x2e\xa9\x99\xbb\xc0\xbc\x94\xfa\x4e\x49\xbb\x6e\x97\xc9\xbd\x6d\x74\x45\xb0\x2e\x99\xfb\x97\x8b\xe8\x7a\xbd\x1e\x5d\x49\xeb\xe2\x7a\x24\x08\x34\x7e\xdc\x51\x95\x04\x29\xd5\xcd\xdc\xac\x26\x53\x49\xe5\x11\x4b\x87\x35\xa6\x52\x1d\x54\xe8\x59\x33\x86\x7c\xa8\x6f\x2b\x79\x91\xe1\x4b\x84\xa8\xa2\xf1\x85\x9c\x28\x8d\xfd\x5e\x38\xf1\xfd\x99\x9c\x70\xd3\xe2\xcb\x08\x51\x45\xc0\xff\x06\x45\x3e\x9e\xbb\xd3\xb8\xd0\x53\x96\xc8\x9d\x38\xc0\xad\xd3\xb8\x90\x51\x36\x96\x94\x61\x69\x68\x65\xbd\x62\xc6\x79\x44\x70\x96\xc2\xee\xd6\xf2\xeb\x97\xc3\x86\x3d\xb4\x30\xb2\x07\xf7\xa6\xed\x53\x67\x91\x6b\x53\xad\xde\xc4\x75\x54\x8c\xb0\x0d\x86\x74\xbb\xe9\xd1\x6d\x43\x13\xbb\x7b\x60\x42\xa3\x81\x99\xfb\xf7\x7d\xbe\xef\xec\x4d\x0e\xed\xcc\x47\x43\x39\x5f\x63\x2a\xd5\xc8\x2e\xb8\xb3\xd1\x2a\x4f\x69\x73\xb8\x80\x8b\xde\x9e\xb0\x24\xf8\x8b\x79\xab\xaa\xd9\xd7\xcc\xdd\xf5\xd5\xed\x19\xc9\xbb\xfe\xea\xc9\xeb\xaf\x1f\xff\xc9\xe4\xd5\xf1\x1c\x1c\x20\xaa\xf9\x3b\x38\x69\xf5\x55\x94\xcb\xc1\x57\xcc\xc8\xd5\x7f\x33\x21\xbf\x6d\x3e\xaa\x60\x0e\xd3\xe1\x43\xf6\x7f\x27\x66\xa3\x9c\x90\x97\xc7\xb3\xfe\x9b\x4d\x5b\x5d\xac\xdd\x65\x85\x3e\x95\x25\xee\x30\x56\xed\xb4\xaf\x47\xae\x1e\x8e\x27\xfe\x4b\xa6\x5b\xe7\x5c\xdb\x1e\xe2\xd0\xf4\x33\xfa\xf6\xed\xdb\x17\x5c\x37\x32\x3f\xcf\x6b\x9f\xe9\xdf\x89\xd3\xed\x9d\xcd\xc9\x3e\x33\x91\xca\x13\x7c\x6e\x16\xf0\xd6\xbd\xc4\xff\x8c\xf3\xa3\xe7\xb8\x67\x77\x1b\x57\x5f\xc2\x2d\xd6\x32\x79\x2a\xaf\xef\x12\xb6\x85\x98\x53\xad\x97\xc4\x5f\x1f\x90\x55\xa9\xa7\x2d\xaa\xcf\xb1\xb5\x14\x60\xe1\x0f\xb6\xee\x5e\xd1\xc2\x73\x2e\xc6\x32\xcb\x39\x1a\x5c\x12\x99\xa6\xf5\x1d\xe4\xc0\x92\xdb\xee\x92\xd5\x82\x55\x2d\x29\x85\xea\x6a\x2d\xa5\xc1\xf5\x9e\xac\x16\x11\x5b\x2d\xa2\x84\x6d\x6b\x3c\x9d\x97\x82\xaf\x16\x51\xc1\x4b\x2f\xbc\x68\xe0\x51\xc5\x80\x51\x9f\xfc\xc1\x81\x1c\x43\x08\x34\xb6\x1c\x81\xce\x69\x85\x40\x42\x0d\x5d\x12\x8d\xf8\x78\x6f\x25\xf7\xae\x75\xe0\x8c\x6d\x0d\xaa\x91\x23\xfe\x1c\x33\xd8\x3e\xcc\x74\xec\x95\x82\x63\x26\xcb\x2e\x6d\x8b\xa5\xbd\xd1\x40\xb6\x30\xd8\x69\x72\x20\x1e\x4d\xa9\xf4\x08\x6b\x50\x55\x3b\x59\x7d\xf8\xeb\x1f\x3f\x1c\x71\xd0\x56\x1c\xb2\xfa\xf0\xf1\xfd\xcf\x27\x47\xa1\x0e\x5e\x3f\xe2\x43\xcf\xc7\xe2\x5c\x3b\x7c\x42\xa4\xc7\x82\x3c\x12\xdf\x61\x68\x4f\x30\x61\x59\x5d\xe9\xcf\x69\xa1\x91\x00\x4b\x96\xa4\x0c\xe4\x70\x12\xb8\x2e\x2f\xf1\xbf\x65\xcd\x9f\x76\x4e\x22\xb2\x3b\x11\xb5\x4e\x47\x15\x2c\xdf\x74\xef\x9a\x06\x80\xda\xfd\xcf\xf3\xbc\xc8\xa1\x3e\xd7\xf5\x4c\x15\xf9\x41\x43\x4e\x74\xc4\xfb\xce\x6c\x3f\xfa\x75\xa3\x1a\xbc\xa5\xca\x65\x01\xd5\x07\x43\x4d\xa1\x61\x09\xa2\xe0\xfc\xee\x55\x55\x75\x0b\xe1\x01\xc7\x32\xcb\xa8\x48\x26\x82\x66\x38\xad\xd7\x0a\x80\x37\xe1\x03\x9a\x3f\x7f\x78\xff\x97\x09\x89\xca\x3e\x11\x81\xef\xdc\x57\xa0\x4b\xf8\xfc\x7c\x59\xab\x98\x28\xd4\x79\x7b\xa8\xdb\xa9\x68\xc9\x31\xe4\xf2\xc1\x4b\xef\x6a\xe1\x73\xfd\xfc\x3c\xc0\x62\x01\x4f\x72\x6a\x36\x87\x80\x38\x5e\x5d\xc2\x67\x48\x19\xc7\x39\xd8\xae\x70\x1c\x09\x4b\xc1\xb5\x86\xba\x88\x63\xd4\xba\x2b\x05\x28\xf2\x84\x1a\xf4\x31\x9a\xb4\x60\xfa\x15\xe4\x65\xc8\x7e\x05\x19\x82\x9e\x90\x82\x93\x69\xb8\x31\x19\x9f\x10\x32\xad\xe3\x0e\x1e\xf4\xd2\xff\xfc\xfa\x2b\x10\xd2\x92\xb5\x7d\x2d\xd7\x26\xeb\xad\xed\x7b\x92\xb7\x51\x04\x7f\x48\x12\x50\x68\x0a\xe5\x8b\x09\x20\xc7\x0c\x85\xb1\x81\xd8\x21\x14\x22\x41\x05\x14\x72\xaa\x6c\x63\xc2\x14\xc6\x46\xaa\xa7\x5e\xc4\x9c\xa9\x6f\x96\x40\x48\x3f\x5e\xcc\x60\xa6\xdd\x93\x77\x21\xd4\x39\x67\x66\x42\x22\x32\xbd\xf3\xc2\x30\x97\x79\x37\x92\xfe\x6a\xe4\xbe\x74\xdc\x77\xfa\x24\x99\xf0\xa3\x5e\x75\x7a\xbe\x99\x90\x05\x67\xab\x05\xf5\xdf\x0b\x2f\x5e\x5f\xf8\x49\x74\x61\xb9\xd7\xa8\xf9\x0e\xc8\x45\x33\x99\x2e\xfc\x64\xe2\xb8\x45\x1e\x14\xf9\x85\x9b\x4b\xae\xf7\x22\xa2\xab\x45\xc4\xd9\x8a\x4c\x43\x9a\xe7\x28\x92\x8f\x72\x42\x9a\xcf\x06\xa4\x97\xf2\xd6\x4b\x2a\x15\x4c\x18\x30\x01\xc3\x38\x83\x23\x20\x2c\x9d\xe8\xef\xec\x1f\x5d\x6f\xed\x14\x81\xa5\xeb\x12\xda\xff\xec\x7b\xcf\xcd\xe3\x41\xae\x55\x54\xbe\xd6\x33\xaf\x6b\xe8\xb9\xab\x34\x8a\xe0\x1d\x33\x1b\x97\x60\x87\x4f\xda\xa7\xb1\x1c\xfb\xfa\x60\x03\x7b\x6f\xcb\x48\x05\xb6\xee\x0a\x3f\x00\x49\x98\x22\x30\x07\x62\x25\xe4\x6e\x30\x38\xd6\xfa\xde\x45\x7f\x74\xb0\x5b\x39\x78\x82\xa5\x0a\x1a\xa4\x8c\x67\x23\x5a\x6c\x92\x61\x09\xe4\x35\x19\x09\x50\x0b\xdf\xb2\xc4\x31\x8c\x54\xa5\x21\xd2\xa8\xb6\xf8\x83\xed\xb5\x3c\x29\x5a\x7d\xa6\xd9\x41\x4e\x99\xe5\x96\x8b\x8d\xfb\x20\xe7\x05\x0d\x94\x5a\xea\x05\x2e\x51\x43\x36\x5a\x51\x13\x21\x2f\xb7\x9c\xb4\xed\x1d\x5e\x58\xd9\xb9\x24\xad\x9f\x8e\xd4\xa5\x6e\x5d\x3b\x50\x4e\xb5\x13\x93\x17\xcb\x79\x6f\x21\xb1\x1d\x3a\xe9\xaa\x8b\xac\x2a\x84\x60\xe2\xa1\x9f\xa5\x37\xb5\x37\xb6\x24\xb2\x04\xfb\xf5\xc1\x76\xa8\x77\xae\xd3\x50\x6f\xe4\xee\x50\x31\x06\x40\xde\xfa\xcc\x3b\x62\x60\x38\x7a\x60\x60\x0c\x43\x59\xc9\x4f\x8f\xf5\x9b\x49\x1d\xb2\xb6\xc3\xfd\x15\xa5\xbd\x26\xb8\x43\x28\x99\x86\x52\x4c\x48\xcc\x59\xfc\x48\x5a\x71\xef\x2f\xa1\x7e\x5d\xf6\xbb\xc8\x0e\x2a\xbb\x89\x97\xbb\x90\xcb\xd8\x7d\xdd\x0c\x15\x72\x49\x93\x49\x6f\x91\xed\xd8\x2d\x77\x5e\x67\x59\x7e\x33\x31\x1b\xa6\xa7\x21\x35\x46\x4d\x88\xa5\x3c\x99\x76\x70\x54\x1d\x14\x66\x72\x8b\x3f\x5a\xaa\x4f\x88\xff\x72\xdf\xab\xeb\x96\x20\x55\xef\x0d\xd5\x65\x57\xb7\x9a\x4f\xfb\x64\x41\x0e\xcb\x5a\x75\xca\x6c\x08\xd8\x60\x99\xb0\x0a\x91\xb7\x74\x95\x47\xa9\xa1\x3a\xab\xb0\x8b\xb0\xee\x1a\xd2\x24\x69\xb5\xb9\x4d\xe8\xb4\x5f\x33\xba\x9a\x06\xcc\x1b\x57\xef\x55\xf5\xf4\x3b\x9b\x87\xd5\x3f\x1f\xce\x5e\x79\x78\xf4\xd9\x33\xb2\x88\x37\xda\x50\x65\x20\x93\x85\x46\xb7\x49\x3d\x98\xcc\x3a\x89\x35\x94\x26\x41\x67\xd8\x43\x91\x80\x7b\x88\xa9\x88\x91\x7b\xcb\x45\xfe\xb2\xdd\x03\xdc\x38\x68\xba\xf7\x0d\xdb\x4e\xe7\x62\x9d\x31\x33\x3e\xd7\x2c\x11\x9c\xa1\x70\x4b\x79\x81\xd3\x4e\x70\xdd\x6e\xb2\x25\x3c\x68\xf5\xa2\x6f\xf5\x62\x1a\x3e\xe2\x53\xae\x50\xeb\xc6\x2e\x0e\x0c\xa3\xed\xe5\xd6\xa6\x77\xc2\xa0\x22\xd3\x5e\xc9\xf1\x11\x28\xf1\x9f\xe6\xf4\x97\xa5\xfa\x48\xf8\x8e\x98\x5f\xcb\xe4\xa9\x57\x19\x08\x6d\x9b\xe9\x79\x8e\x61\xae\x70\x8b\xc2\xfc\x84\x29\x2d\xb8\x99\x74\x27\xa7\x3b\x79\xf8\xad\xde\x58\x05\xb9\xeb\x75\x2d\xf7\x1f\xc3\xae\x6e\xf5\x1d\xa9\x23\xc7\x37\x04\xcd\x11\xe2\x8c\xe5\xa3\xbd\x89\x7f\xb1\xfc\x97\x4f\xed\xbf\x09\x5b\x44\xfe\x7a\x69\x11\xf9\x3f\xd7\xfb\x57\x00\x00\x00\xff\xff\x9a\x27\xa1\x15\xc6\x27\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 10182, mode: os.FileMode(420), modTime: time.Unix(1609556624, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

